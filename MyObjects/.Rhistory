sigma_v <- 10000
#パラメタ
sigma_w <- 1000
library(dlm)
library(KFAS)
library(ggplot2)
library(ggfortify)
Nile
length(Nile)
KfLocalLevel <- function(y, mu_pre, P_pre, sigma_w, sigma_v){
#予測
mu_forecast <- mu_pre
P_forecast <- P_pre + sigma_w
y_forecast <- mu_forecast
F <- P_forecast + sigma_v
#フィルタリング
K <- P_forecast / (P_forecast + sigma_v)
y_resid <- y - y_forecast
mu_filter <- mu_forecast + K * y_resid
P_filter <- (1 - K) * P_forecast
result <- data.frame(
mu_filter = mu_filter,
P_filter = P_filter,
y_resid = y_resid,
F = F,
K = K
)
return(result)
}
N <- length(Nile)
#フィルタ化推定量
mu_filter <- numeric(N)
mu_zero <- 0
mu_filter <- c(mu_zero, mu_filter)
#フィルタ化推定量の誤差分散
P_filter <- numeric(N)
P_zero <- 10000000
P_filter <- c(P_zero, P_filter)
y_resid <- numeric(N)
F <- numeric(N)
K <- numeric(N)
#パラメタ
sigma_w <- 1000
sigma_v <- 10000
F
kekka <- KfLocalLevel(
y = Nile[i], mu_pre = mu_filter[i], P_pre = P_filter[i],
sigma_w=sigma_w, sigma_v=sigma_v
)
N
for(i in 1:N){
kekka <- KfLocalLevel(
y = Nile[i], mu_pre = mu_filter[i], P_pre = P_filter[i],
sigma_w=sigma_w, sigma_v=sigma_v
)
#フィルタ化推定量
mu_filter[i + 1] <- kekka$mu_filter
#フィルタ化推定量の誤差分散
P_filter[i + 1] <-  kekka$P_filter
#予測誤差
y_resid[i] <- kekka$y_resid
#予測誤差の分散
F[i] <- kekka$F
#カルマンゲイン
K[i] <- kekka$K
}
plot(Nile)
gplot(Nile)
autoplot(Nile)
autoplot(mu_filter)
mu_filter
plot(mu_filter)
autoplot(ts(mu_filter))
autoplot(ts(mu_filter[-1]))
autoplot(Nile)
Nile
autoplot(Nile, xlim(1850, 2000))
autoplot(Nile, xlim=(1850, 2000))
autoplot(ts(mu_filter[-1]))
ts(mu_filter[-1], start=1871)
autoplot(ts(mu_filter[-1], start=1871))
autoplot(ts(mu_filter[-1], start=1871))
autoplot(Nile, xlim=c(1850, 2000), ylim=c(400, 1400), , xlim=c(1850, 2000), ylim=c(400, 1400))
autoplot(Nile, xlim=c(1850, 2000), ylim=c(400, 1400), col="#ff000020")
?autoplot
autoplot(Nile, xlim=c(1850, 2000), ylim=c(400, 1400), colour="#ff000020")
autoplot(Nile, xlim=c(1850, 2000), ylim=c(400, 1400), colour="#ff000030")
autoplot(Nile, xlim=c(1850, 2000), ylim=c(400, 1400), colour="#ff000040")
autoplot(ts(mu_filter[-1], start=1871), xlim=c(1850, 2000), ylim=c(400, 1400),
colour="#0000ff40")
autoplot(Nile, xlim=c(1850, 2000), ylim=c(400, 1400), colour="#ff000040")
par(new=T)
autoplot(ts(mu_filter[-1], start=1871), xlim=c(1850, 2000), ylim=c(400, 1400),
colour="#0000ff40")
autoplot(Nile, xlim=c(1850, 2000), ylim=c(400, 1400), colour="#ff000040")
# ggplot ------------------------------------------------------------------
library(ggplot2)
df <- diamonds
#散布図
ggplot(df, aes(x=carat, y=price)) +
geom_point()
?aes
ggsave(filename="test.png", width=10, height=8, units="cm", dpi=100)
#散布図
ggplot(df, aes(x=carat, y=price)) +
geom_point() +
ggsave(filename="test.png", width=10, height=8, units="cm", dpi=100)
#散布図
g <- ggplot(df, aes(x=carat, y=price)) +
geom_point()
ggsave(filename="test.png", plot=g, width=10, height=8, units="cm", dpi=100)
ggsave(filename="test.jpg", plot=g, width=10, height=8, units="cm", dpi=100)
# ggplot ------------------------------------------------------------------
library(ggplot2)
summary(df)
#散布図
g <- ggplot(df, aes(x=carat, y=price)) +
geom_point()
df
#散布図
ggplot(df, aes(x=carat, y=price)) +
geom_point()
ggplot(df, aes(x=carat, y=price, color=cut)) +
geom_point()
#箱ひげ図
ggplot(df, aes(x=cut, y=price)) +
geom_boxplot()
#ヒストグラム
ggplot(df, aes(x=price)) +
geom_histogram()
ggplot(df, aes(x=price, y=..density..)) +
geom_histogram()
ggplot(df, aes(x=price, y=..density..)) +
geom_histogram() +
facet_wrap(~cut)
ggplot(df, aes(x=price, y=..density..)) +
geom_histogram() +
facet_wrap(clarity~cut)
ggplot(df, aes(x=price, y=..density..)) +
geom_histogram() +
facet_grid(clarity~cut)
ggplot(df, aes(x=price, y=..density.., fill=cut)) +
geom_histogram() +
facet_grid(clarity~cut)
ggplot(df, aes(x=price, y=..density.., fill=cut)) +
geom_histogram()
ggplot(df, aes(x=price, y=..density.., fill=cut)) +
geom_histogram(position="identity")
ggplot(df, aes(x=price, y=..density.., fill=cut)) +
geom_histogram(position="identity", alpha=0.3)
ggplot(df, aes(x=price, y=..density.., fill=cut)) +
geom_histogram(position="fill", alpha=0.3)
ggplot(df, aes(x=price, y=..density.., fill=cut)) +
geom_histogram(position="fill", alpha=0.3, color="black")
ggplot(df, aes(x=price, y=..density.., fill=cut)) +
geom_histogram(position="identity", alpha=0.3)
ggplot(df, aes(x=price, y=..density.., fill=cut)) +
geom_histogram(position="fill", alpha=0.3, color="black")
ggplot(df, aes(x=price, y=..density.., fill=cut)) +
geom_histogram(position="fill", alpha=0.3, color="black", bindwith=1000)
# ggplot ------------------------------------------------------------------
library(ggplot2)
iris
str(iris)
library(formattable)
install.packages("formattable")
library(formattable)
formattable(iris[c(1:3, 51:53, 101:103)])
formattable(iris[c(1:3, 51:53, 101:103),])
?subset
iris[c(1:3, 51:53, 101:103),]
formattable(iris[c(1:3, 51:53, 101:103),])
ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width)) +
geom_point()
ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width)) +
geom_point() +
geom_smooth()
ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width)) +
geom_point() +
geom_smooth() +
theme_bw()
ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width)) +
geom_point() +
geom_smooth()
ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width)) +
geom_point() +
geom_smooth() +
theme_bw()
formattable(iris[c(1:3, 51:53, 101:103),])
#散布図
ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, colour=Species)) +
geom_point() +
#散布図
ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, colour=Species)) +
geom_point()
#散布図
ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, colour=Species, size=Petal.Width)) +
geom_point()
#散布図
ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, colour=Species, size=Petal.Width, shape=Species)) +
geom_point()
# ggplot ------------------------------------------------------------------
library(ggplot2)
str(iris)
library(formattable)
formattable(iris[c(1:3, 51:53, 101:103),])
#ヒストグラム
ggplot(iris, aes(x=Petal.Length)) +
geom_histgram()
#ヒストグラム
ggplot(iris, aes(x=Petal.Length)) +
geom_histogram()
#ヒストグラム
ggplot(iris, aes(x=Petal.Length, fill=Species)) +
geom_histogram()
#散布図
ggplot(iris, aes(x=Sepal.Length, y=Sepal.Width, colour=Species,
size=Petal.Width, shape=Species, alpha=0.3)) +
geom_point()
#ヒストグラム
ggplot(iris, aes(x=Petal.Length, fill=Species, alpha=0.3)) +
geom_histogram()
#ヒストグラム
ggplot(iris, aes(x=Petal.Length, y=..density.., fill=Species, alpha=0.3)) +
geom_histogram()
#ヒストグラム
ggplot(iris, aes(x=Petal.Length, y=..density.., fill=Species, alpha=0.3)) +
geom_histogram() +
geom_density()
#ヒストグラム
ggplot(iris, aes(x=Petal.Length, y=..density.., fill=Species, alpha=0.3)) +
geom_histogram(position="dodge") +
geom_density()
#ヒストグラム
ggplot(iris, aes(x=Petal.Length, y=..density.., fill=Species, alpha=0.3)) +
geom_histogram(position="dodge") +
geom_density(alpha=0.5)
#ヒストグラム
ggplot(iris, aes(x=Petal.Length, y=..density.., fill=Species)) +
geom_histogram(position="dodge") +
geom_density(alpha=0.5)
#ヒストグラム
ggplot(iris, aes(x=Petal.Length, y=..density.., fill=Species)) +
geom_histogram(position="dodge") +
geom_density(alpha=0.5) +
geom_vline(xintercept=0, linetype=1)
#ヒストグラム
ggplot(iris, aes(x=Petal.Length, y=..density.., fill=Species)) +
geom_histogram(position="dodge") +
geom_density(alpha=0.5) +
geom_vline(xintercept=0, linetype=1) +
geom_vline(yintercept=1, linetype=2)
#ヒストグラム
ggplot(iris, aes(x=Petal.Length, y=..density.., fill=Species)) +
geom_histogram(position="dodge") +
geom_density(alpha=0.5) +
geom_vline(xintercept=0, linetype=1) +
geom_hline(yintercept=1, linetype=2)
#ヒストグラム
ggplot(iris, aes(x=Petal.Length, y=..density.., fill=Species)) +
geom_histogram(position="dodge") +
geom_density(alpha=0.5) +
geom_vline(xintercept=0, linetype=1, size=1.5) +
geom_hline(yintercept=1, linetype=2)
#ヒストグラム
ggplot(iris, aes(x=Petal.Length, y=..density.., fill=Species)) +
geom_histogram(position="dodge") +
geom_density(alpha=0.5) +
geom_vline(xintercept=0, linetype=1, size=1) +
geom_hline(yintercept=1, linetype=2, size=1)
#ヒストグラム
ggplot(iris, aes(x=Petal.Length, y=..density.., fill=Species)) +
geom_histogram(position="dodge", bins=5) +
geom_density(alpha=0.5) +
geom_vline(xintercept=0, linetype=1, size=1) +
geom_hline(yintercept=1, linetype=2, size=1)
#ヒストグラム
ggplot(iris, aes(x=Petal.Length, y=..density.., fill=Species)) +
geom_histogram(position="dodge", bins=15) +
geom_density(alpha=0.5) +
geom_vline(xintercept=0, linetype=1, size=1) +
geom_hline(yintercept=1, linetype=2, size=1)
ligrary(tidyverse)
library(tidyverse)
as.Date("2016-01-01")
seq(as.Date("2016-01-01"), as.Date("2016-12-31"), by="days"))
seq(as.Date("2016-01-01"), as.Date("2016-12-31"), by="days")
as.POSIXct(seq(as.Date("2016-01-01"), as.Date("2016-12-31"), by="days")))
as.POSIXct(seq(as.Date("2016-01-01"), as.Date("2016-12-31"), by="days"))
df_line <- data.frame(Temperature=rgamma(365, 1,1)) %>%
dplyr::mutate(Lower=Temperature-3,
Upper=Temperature+3,
Date=as.POSIXct(seq(as.Date("2016-01-01"), as.Date("2016-12-31"), by="days")))
df_line <- data.frame(Temperature=rgamma(365, 1,1)) %>%
dplyr::mutate(Lower=Temperature-3,
Upper=Temperature+3,
Date=as.POSIXct(seq(as.Date("2016-01-01"), as.Date("2016-12-30"), by="days")))
str(df_line)
# ggplot ------------------------------------------------------------------
library(ggplot2)
library(formattable)
library(tidyverse)
df_line <- data.frame(Temperature=rgamma(365, 1,1)) %>%
dplyr::mutate(Lower=Temperature-3,
Upper=Temperature+3,
Date=as.POSIXct(seq(as.Date("2016-01-01"), as.Date("2016-12-30"), by="days")))
str(df_line)
ggplot(df_line, aes(x=Date, y=Temperature)) +
geom_line()
ggplot(df_line, aes(x=Date, y=Temperature)) +
geom_line() +
geom_ribbon(aes(ymin=Lower, ymax=Upper), alpha=0.2)
ggplot(df_line, aes(x=Date, y=Temperature)) +
geom_line() +
geom_ribbon(aes(ymin=Lower, ymax=Upper), alpha=0.2) +
scale_x_datetime(breaks="30 days")
ggplot(df_line, aes(x=Date, y=Temperature)) +
geom_line() +
geom_ribbon(aes(ymin=Lower, ymax=Upper), alpha=0.2) +
scale_x_datetime(30)
ggplot(df_line, aes(x=Date, y=Temperature)) +
geom_line() +
geom_ribbon(aes(ymin=Lower, ymax=Upper), alpha=0.2) +
scale_x_datetime(0)
ggplot(df_line, aes(x=Date, y=Temperature)) +
geom_line() +
geom_ribbon(aes(ymin=Lower, ymax=Upper), alpha=0.2) +
scale_x_datetime(10)
ggplot(df_line, aes(x=Date, y=Temperature)) +
geom_line() +
geom_ribbon(aes(ymin=Lower, ymax=Upper), alpha=0.2)
#棒グラフ
ggplot(iris, aes(x=Species, y=Petal.Length)) +
stat_summary(fun.y="mean", geom="bar")
#棒グラフ
ggplot(iris, aes(x=Species, y=Petal.Length)) +
stat_summary(fun.y="mean", geom="bar") +
stat_summary(fun.data=mean_cl_normal, geom="errorbar",
alpha=0.6, size=1, width=0.1)
#棒グラフ
ggplot(iris, aes(x=Species, y=Petal.Length)) +
stat_summary(fun.y="mean", geom="bar") +
stat_summary(fun.data=mean_cl_normal, geom="errorbar",
alpha=0.6, size=1, width=0.1)
#棒グラフ
ggplot(iris, aes(x=Species, y=Petal.Length)) +
stat_summary(fun.y="mean", geom="bar") +
stat_summary(fun.data=mean_cl_normal, geom="errorbar", alpha=0.6, size=1, width=0.1)
library(Hmisc)
install.packages("Hmisc")
library(Hmisc)
#棒グラフ
ggplot(iris, aes(x=Species, y=Petal.Length)) +
stat_summary(fun.y="mean", geom="bar") +
stat_summary(fun.data=mean_cl_normal, geom="errorbar", alpha=0.6, size=1, width=0.1)
#棒グラフ
ggplot(iris, aes(x=Species, y=Petal.Length)) +
stat_summary(fun.y="mean", geom="bar") +
stat_summary(fun.data=mean_cl_normal, geom="errorbar", alpha=0.6, size=1, width=0.1) +
scale_y_continuous(expand=c(0, 0))
#棒グラフ
ggplot(iris, aes(x=Species, y=Petal.Length)) +
stat_summary(fun.y="mean", geom="bar") +
stat_summary(fun.data=mean_cl_normal, geom="errorbar", alpha=0.6, size=1, width=0.1) +
scale_y_continuous(expand=c(0, 0), limits=c(0, 8))
#バイオリンプロット
ggplot(iris, aes(x=Species, y=Petal.Width)) +
geom_violin()
# ggplot ------------------------------------------------------------------
library(ggplot2)
#バイオリンプロット
ggplot(iris, aes(x=Species, y=Petal.Width)) +
geom_violin()
#バイオリンプロット
ggplot(iris, aes(x=Species, y=Petal.Length)) +
geom_violin()
#バイオリンプロット
ggplot(iris, aes(x=Species, y=Petal.Width)) +
geom_violin()
#バイオリンプロット
ggplot(iris, aes(x=Species, y=Petal.Width)) +
geom_violin() +
coord_flip()
#箱ひげ図
ggplot(iris, aes(x=Species, y=Petal.Width)) +
geom_boxplot()
#箱ひげ図
ggplot(iris, aes(x=Species, y=Petal.Width)) +
geom_boxplot() +
facet_wrap(~Species)
#箱ひげ図
ggplot(iris, aes(x=Species, y=Petal.Width)) +
geom_boxplot() +
facet_wrap(~Species, scales="free")
#箱ひげ図
ggplot(iris, aes(x=Species, y=Petal.Width)) +
geom_boxplot() +
facet_wrap(~Species, scales="free", ncol=3)
rep(1:6, each=25)
#色
iris_id <- iris %>% dplyr::mutate(id=as.factor(rep(1:6, each=25)))
#時系列
library(tidyverse)
#色
iris_id <- iris %>% dplyr::mutate(id=as.factor(rep(1:6, each=25)))
str(iris_id)
ggplot(iris, aes(x=id, y=Sepal.Lengh, colour=id, filled=id)) +
geom_boxplot(alpha=0.4)
ggplot(iris, aes(x=id, y=Sepal.Length, colour=id, filled=id)) +
geom_boxplot(alpha=0.4)
ggplot(iris_id, aes(x=id, y=Sepal.Length, colour=id, filled=id)) +
geom_boxplot(alpha=0.4)
ggplot(iris_id, aes(x=id, y=Sepal.Length, colour=id, fill=id )) +
geom_boxplot(alpha=0.4)
ggplot(iris_id, aes(x=id, y=Sepal.Length, colour=id, fill=id)) +
geom_boxplot(alpha=0.4) +
theme_light()
ggplot(iris_id, aes(x=id, y=Sepal.Length, colour=id, fill=id)) +
geom_boxplot(alpha=0.4)
ggplot(iris_id, aes(x=id, y=Sepal.Length, colour=id, fill=id)) +
geom_boxplot(alpha=0.4) +
theme_light() +
scale_colour_brewer(palette="BrBg")
ggplot(iris_id, aes(x=id, y=Sepal.Length, colour=id, fill=id)) +
geom_boxplot(alpha=0.4) +
theme_light()
ggplot(iris_id, aes(x=id, y=Sepal.Length, colour=id, fill=id)) +
geom_boxplot(alpha=0.4) +
theme_light() +
scale_colour_brewer(palette="BrBg")
ggplot(iris_id, aes(x=id, y=Sepal.Length, colour=id, fill=id)) +
geom_boxplot(alpha=0.4) +
theme_light() +
scale_colour_brewer(palette="BrBg") +
scale_fill_brewer(palette="BrBg")
ggplot(iris_id, aes(x=id, y=Sepal.Length, colour=id, fill=id)) +
geom_boxplot(alpha=0.3) +
theme_light() +
scale_colour_brewer(palette="BrBg") +
scale_fill_brewer(palette="BrBg")
ggplot(iris_id, aes(x=id, y=Sepal.Length, colour=id, fill=id)) +
geom_boxplot(alpha=0.3) +
theme_light() +
scale_colour_brewer(palette="BrBG") +
scale_fill_brewer(palette="BrBG")
Colours=c("#FFD700", "#9F79EE", "#7CCD7C")
ggplot(iris, aes(x=Species, y=Sepal.Length, fill=Species)) +
geom_boxplot(alpha=0.7)
ggplot(iris, aes(x=Species, y=Sepal.Length, fill=Species)) +
geom_boxplot(alpha=0.7) +
theme_classic()
ggplot(iris, aes(x=Species, y=Sepal.Length, fill=Species)) +
geom_boxplot(alpha=0.7) +
theme_classic() +
scale_fill_manual(values=Colours)
Colours=c("white", "gray80", "black")
ggplot(iris, aes(x=Species, y=Sepal.Length, fill=Species)) +
geom_boxplot(alpha=0.7) +
theme_classic() +
scale_fill_manual(values=Colours2)
# ggplot ------------------------------------------------------------------
library(ggplot2)
ggplot(iris, aes(x=Species, y=Sepal.Length, fill=Species)) +
geom_boxplot(alpha=0.7) +
theme_classic() +
scale_fill_manual(values=Colours2)
Colours2=c("white", "gray80", "black")
ggplot(iris, aes(x=Species, y=Sepal.Length, fill=Species)) +
geom_boxplot(alpha=0.7) +
theme_classic() +
scale_fill_manual(values=Colours2)
install.packages("ggThemeAssist")
install.package("Colour Picker")
install.package("colourpicker")
install.packages("colourpicker")
colourpicker:::colourPickerAddin()
#グラフ操作
ggplot(iris, aes(x=Petal.Length, fill=Species)) +
geom_histogram(alpha=0.5, position="dodge")
#グラフ操作
gg2 <- ggplot(iris, aes(x=Petal.Length, fill=Species)) +
geom_histogram(alpha=0.5, position="dodge")
gg2
ggThemeAssist:::ggThemeAssistAddin()
ggThemeAssist:::ggThemeAssistAddin()
gg2 + theme(plot.subtitle = element_text(vjust = 1),
plot.caption = element_text(vjust = 1)) +labs(title = "iris")
ggThemeAssist:::ggThemeAssistAddin()
gg2 + theme(plot.subtitle = element_text(vjust = 1),
plot.caption = element_text(vjust = 1)) +labs(title = "iris") + theme(plot.title = element_text(size = 16,
hjust = 0.5, vjust = 0.25))
library(plotly)
install.packages("plotly")
library(plotly)
#色
iris_id <- iris %>% dplyr::mutate(id=as.factor(rep(1:6, each=25)))
ggplot(iris_id, aex(x=id, y=Sepal.Length, colour=id, fill=id)) +
geom_boxplot()
ggplot(iris_id, aes(x=id, y=Sepal.Length, colour=id, fill=id)) +
geom_boxplot()
ggplot(iris_id, aes(x=id, y=Sepal.Length, colour=id, fill=id)) +
geom_boxplot() +
theme_light()
ggplot(iris_id, aes(x=id, y=Sepal.Length, colour=id, fill=id)) +
geom_boxplot() +
theme_light() +
facet_wrap(~Species, scales="free")
gg_ly <- ggplot(iris_id, aes(x=id, y=Sepal.Length, colour=id, fill=id)) +
geom_boxplot() +
theme_light() +
facet_wrap(~Species, scales="free")
ggplotly(gg_ly)
